[package]
name = "client-sdk"
version = "0.1.0"
edition = "2021"
repository = "https://github.com/Lantern-chat/client-sdk-rs"
license = "GPL-3.0-only"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[workspace]
members = ["./ts-bindgen", "./ts-bindgen/ts-bindgen-macros"]

[patch.crates-io]
postgres-types = { git = "https://github.com/Lantern-chat/rust-postgres" }
schemars = { git = "https://github.com/Lantern-chat/schemars" }
# rkyv = { git = "https://github.com/rkyv/rkyv" }

[workspace.dependencies]
snowflake = { git = "https://github.com/Lantern-chat/snowflake", features = ["timestamp"] }
timestamp = { package = "iso8601-timestamp", version = "0.3.0" }

[dependencies]
snowflake.workspace = true
timestamp.workspace = true

ftl = { git = "https://github.com/Lantern-chat/ftl2", optional = true, default-features = false }

rkyv = { version = "0.8.0", optional = true, features = ["bytecheck", "smol_str-0_3", "thin-vec-0_2", "triomphe-0_1"] }
rkyv_rpc = { git = "https://github.com/Lantern-chat/rkyv_rpc", optional = true }

serde = { version = "1", features = ["derive", "rc"] }
bitflags_serde_shim = { version = "0.2.5", default-features = false }
bitflags = "2"
serde_repr = "0.1"
enum-primitive-derive = "0.3"
num-traits = "0.2"
itoa = "1"
time = { version = "0.3", features = ["macros"] }
smol_str = { version = "0.3", features = ["serde"] }
thin-vec = { version = "0.2.12", features = ["serde"] }
arrayvec = { version = "0.7.1", features = ["serde"] }
paste = "1"
static_assertions = "1"
byteorder = "1.4"
triomphe = "0.1.8"
rustc-hash = { version = "2.0", default-features = false }
const-random = "0.1"

bon = { version = "3", optional = true }
typed-builder = { version = "0.20", optional = true }
schemars = { version = "1.0.0-alpha.14", optional = true, features = ["triomphe01", "smol_str03", "thin-vec02"] }
okapi = { version = "0.7.0-rc.1", optional = true }

serde_json = { version = "1", optional = true }

borsh = { version = "1", optional = true }

postgres-types = { version = "0.2.1", optional = true }
bytes = { version = "1", optional = true }
rusqlite = { version = "0.32.0", optional = true }

crc32fast = { version = "1", optional = true }
ciborium = { version = "0.2", optional = true }

url = { version = "2", optional = true }
thiserror = { version = "2", optional = true, default-features = false }
mime = { version = "0.3", optional = true }
headers = { version = "0.4", optional = true }
http = { version = "1", optional = true }
serde_urlencoded = { version = "0.7.1", optional = true }
form_urlencoded = { version = "1.0.1", optional = true }
percent-encoding = { version = "2.1.0", optional = true }
arc-swap = { version = "1.5", optional = true }
base64 = { version = "0.22.0", optional = true }
tokio = { version = "1", optional = true, default-features = false, features = ["io-util"] }
reqwest = { version = "0.12", optional = true, default-features = false, features = ["gzip", "deflate", "http2"] }

tokio-tungstenite = { version = "0.24", optional = true, default-features = false, features = ["connect"] }
miniz_oxide = { version = "0.8", optional = true }
futures = { version = "0.3", optional = true }
pin-project-lite = { version = "0.2.8", optional = true }
async-trait = { version = "0.1", optional = true }
smallvec = { version = "1.10.0", optional = true }

ts-bindgen = { path = "./ts-bindgen", optional = true }

[features]
_internal_common = ["thiserror"]

std = ["rkyv?/std", "timestamp/std", "thiserror/std"]

rkyv = ["dep:rkyv", "timestamp/rkyv_08", "snowflake/rkyv", "rkyv_rpc"]

borsh = ["dep:borsh", "snowflake/borsh", "timestamp/borsh"]

schema = ["std", "schemars", "okapi", "timestamp/schema"]

pg = ["std", "postgres-types", "bytes", "timestamp/pg", "snowflake/pg"]
rusqlite = ["std", "dep:rusqlite", "timestamp/rusqlite", "snowflake/rusqlite"]
api = ["http", "_internal_common", "percent-encoding", "futures"]              # http required for Method

# Low-level command execution
driver = ["std", "serde_json", "reqwest", "api", "serde_urlencoded", "form_urlencoded", "headers", "mime", "url", "base64", "crc32fast", "bytes"]

# High-level client library
client = ["std", "driver", "arc-swap", "tokio"]
fs = ["std", "tokio/fs"]

brotli = ["reqwest?/brotli"]

# Realtime gateway support
gateway = ["std", "serde_json", "client", "tokio-tungstenite", "miniz_oxide", "futures", "pin-project-lite", "_internal_common"]

framework_utils = ["smallvec"]
framework = ["client", "gateway", "async-trait", "tokio/macros", "framework_utils"]

# Efficient binary Encoding
cbor = ["ciborium"]

# Various TLS
native-tls = ["tokio-tungstenite/native-tls", "reqwest/native-tls"]
rustls-tls-native-roots = ["tokio-tungstenite/rustls-tls-native-roots", "reqwest/rustls-tls-native-roots"]
rustls-tls-webpki-roots = ["tokio-tungstenite/rustls-tls-webpki-roots", "reqwest/rustls-tls-webpki-roots"]

ts = ["ts-bindgen"]

default = ["rkyv", "std", "api", "driver", "client", "gateway", "fs", "rustls-tls-native-roots", "framework", "cbor"]

[dev-dependencies]
tokio = { version = "1", features = ["full"] }
lipsum = "0.9.0"
rand = "0.8.5"

[profile.dev]
debug = 1

[examples.generate_ts_sdk]
required-features = ["ts"]
